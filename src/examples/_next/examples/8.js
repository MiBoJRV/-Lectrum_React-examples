/**
 * –ú–∞—Å—Å–∏–≤, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤–æ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç useEffect –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
 * –ü–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–ª–ª–±–µ–∫ useEffect –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è,
 * –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.
 *
 * –û useEffect —Ç–∞–∫–æ–π —Ñ–æ—Ä–º—ã –º–æ–∂–Ω–æ –¥—É–º–∞—Ç—å,
 * –∫–∞–∫ –æ componentDidMount + componentDidUpdate + componentWillUnmount.
 */
import { useState, useEffect } from 'react';
import { render } from 'react-dom';

const Parent = () => {
    const [count, setCount] = useState(0);

    const decrement = () => setCount(count - 1);
    const reset = () => setCount(0);
    const increment = () => setCount(count + 1);

    useEffect(() => {
        const timer = setInterval(increment, 1000);

        console.log('‚è≥ useEffect');

        return () => {
            console.log('‚åõÔ∏è –û—á–∏—Å—Ç–∫–∞!');
            clearInterval(timer);
        };
    }, [increment]);

    console.log('üñ• –†–µ–Ω–¥–µ—Ä!', count);

    return (
        <section className="counter">
            <h1>–°—á—ë—Ç—á–∏–∫: {count}</h1>
            <button onClick={decrement}>-</button>
            <button onClick={reset}>–û–±–Ω—É–ª–∏—Ç—å</button>
            <button onClick={increment}>+</button>
        </section>
    );
};

render(<Parent />, document.getElementById('root'));
