/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–ª–ª–±–µ–∫.
 * –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ–≥–æ –∫–æ–ª–ª–±–µ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–π —è—á–µ–π–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
 *
 * –ò–¥–µ—è –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É setState –≤ –∫–ª–∞—Å—Å–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö.
 *
 * –ß—Ç–æ–±—ã –æ–±–ª–∞–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —è—á–µ–µ–∫ —Å –ø–æ–º–æ—â—å—é –≤—ã–∑–æ–≤–æ–≤ useState.
 */
import { useState } from 'react';
import { render } from 'react-dom';

const Counter = () => {
    const [count, setCount] = useState(0);
    const [isTouched, setIsTouched] = useState(false);

    const decrement = () => {
        setCount(prevCount => prevCount - 1);
        setIsTouched(true);
    };
    const reset = () => {
        setCount(0);
        setIsTouched(false);
    };
    const increment = () => {
        setCount(prevCount => prevCount + 1);
        setIsTouched(true);
    };

    console.log('üñ• –†–µ–Ω–¥–µ—Ä!', count);

    return (
        <section className="counter">
            <h1>
                <span>–°—á—ë—Ç—á–∏–∫: {count}</span>
                <span>{isTouched ? '‚úÖ' : '‚ùå'}</span>
            </h1>
            <button onClick={decrement}>-</button>
            <button onClick={reset}>–û–±–Ω—É–ª–∏—Ç—å</button>
            <button onClick={increment}>+</button>
        </section>
    );
};

render(<Counter />, document.getElementById('root'));
