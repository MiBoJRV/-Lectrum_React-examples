/**
 * –•—É–∫ useCallback –ø–æ—Ö–æ–∂ –Ω–∞ —Ö—É–∫ useCallback.
 *
 * useCallback(fn, inputs)
 * useMemo(() => fn, inputs)
 */
import React, { memo, useState, useCallback } from 'react';
import { render } from 'react-dom';

const Button = memo(props => {
    console.log('‚Üí üñ• –†–µ–Ω–¥–µ—Ä –ø–æ—Ç–æ–º–∫–∞', props);

    return <button onClick={props.handleClick}>{props.children}</button>;
});

const Counter = () => {
    const [count, setCount] = useState(0);

    const decrement = useCallback(
        () => setCount(prevCount => prevCount - 1),
        [],
    );
    const reset = useCallback(() => setCount(0), []);
    const increment = useCallback(
        () => setCount(prevCount => prevCount + 1),
        [],
    );

    console.log('‚Üí üñ• –†–µ–Ω–¥–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è');

    return (
        <section className="counter">
            <h1>–°—á—ë—Ç—á–∏–∫: {count}</h1>
            <Button handleClick={decrement}>-</Button>
            <Button handleClick={reset}>–û–±–Ω—É–ª–∏—Ç—å</Button>
            <Button handleClick={increment}>+</Button>
        </section>
    );
};

render(<Counter />, document.getElementById('root'));
