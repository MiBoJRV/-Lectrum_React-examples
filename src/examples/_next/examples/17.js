/**
 * –§—É–Ω–∫—Ü–∏—è memo ‚Äî —ç—Ç–æ –∞–Ω–∞–ª–æ–≥ shouldComponentUpdate,
 * —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
 */
import { memo, useState } from 'react';
import { render } from 'react-dom';

import { useStopwatch, useRandomColor } from './hooks';

const Title = memo(props => {
    const color = useRandomColor();

    return <h1 style={{ color }}>–°—á—ë—Ç—á–∏–∫: {props.count}</h1>;
});

const Parent = () => {
    const [count, setCount] = useState(0);
    const stopwatch = useStopwatch();

    const buttonText = stopwatch.isRunning ? 'üèÅ –°—Ç–æ–ø' : 'üé¨ –°—Ç–∞—Ä—Ç';

    return (
        <>
            <section className="counter">
                <Title count={count} />
                <button onClick={() => setCount(count - 1)}>-</button>
                <button onClick={() => setCount(0)}>–û–±–Ω—É–ª–∏—Ç—å</button>
                <button onClick={() => setCount(count + 1)}>+</button>
            </section>
            <section className="stopwatch">
                <code>{stopwatch.lapse} –º—Å</code>
                <button onClick={stopwatch.toggleRun}>{buttonText}</button>
                <button onClick={stopwatch.clear}>–û—á–∏—Å—Ç–∏—Ç—å</button>
            </section>
        </>
    );
};

render(<Parent />, document.getElementById('root'));
